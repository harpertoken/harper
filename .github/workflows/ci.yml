name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly dependency check

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings"
  RUSTUP_MAX_RETRIES: 10

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: 1.82.0  # MSRV

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust || 'stable' }}
        components: rustfmt, clippy

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libsqlite3-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sqlite3 pkg-config

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}
        cache-on-failure: true
        cache-all-crates: true

    - name: Generate Cargo.lock
      run: cargo generate-lockfile

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy lints
      run: cargo clippy --all-targets --all-features --workspace -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features --workspace

    - name: Run unit tests
      run: cargo test --all-features --workspace --verbose
      env:
        RUST_LOG: debug

    - name: Run integration tests
      run: cargo test --test '*' --all-features --workspace --verbose
      env:
        RUST_LOG: debug

    - name: Build in release mode
      run: cargo build --release --all-features --workspace --verbose

    - name: Test release build
      run: cargo test --release --all-features --workspace --verbose

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust || 'stable' }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      run: cargo install --locked cargo-audit

    - name: Run security audit
      run: cargo audit --deny warnings

    - name: Install cargo-deny
      run: cargo install --locked cargo-deny

    - name: Run cargo-deny
      run: cargo deny check

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust || 'stable' }}
        components: llvm-tools-preview

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev pkg-config

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-llvm-cov
      run: cargo install --locked cargo-llvm-cov

    - name: Generate test coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      env:
        RUST_LOG: debug

    - name: Upload coverage to Codecov
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Skip Codecov upload (no token or not main branch)
      if: github.event_name == 'pull_request' || github.ref != 'refs/heads/main' || github.event_name != 'push'
      run: echo "Skipping Codecov upload - not on main branch or no token available"

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install MSRV Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.82.0

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev pkg-config

    - name: Check MSRV compatibility
      run: cargo check --all-features --workspace